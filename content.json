{"meta":{"title":"Ajaxlover's Blog","subtitle":"","description":"Web前端","author":"Yang","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-01-27T10:37:13.000Z","updated":"2020-01-27T13:20:42.417Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-01-27T11:28:52.000Z","updated":"2020-01-27T11:29:17.742Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-27T10:40:53.000Z","updated":"2020-01-27T10:44:10.328Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用express开发服务端基本步骤","slug":"使用express开发服务端基本步骤","date":"2019-12-20T05:57:30.000Z","updated":"2020-01-27T13:18:22.190Z","comments":true,"path":"2019/12/20/使用express开发服务端基本步骤/","link":"","permalink":"http://yoursite.com/2019/12/20/%E4%BD%BF%E7%94%A8express%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/","excerpt":"","text":"使用express框架开发服务端程序的基本步骤第一步:安装Nodejs环境,因为express框架是基于nodejs的第二步:安装Express在终端命令行运行下面的命令: //全局安装express npm install express -g //全局安装创建express项目的生成器工具 npm install express-generator -g 第三步:创建项目并初始化在终端命令行运行下面的命令: //切换到你想放置项目的目录 express 项目名称 //创建项目 //切换到项目根目录 npm install //安装相关依赖 第四步:启动项目npm start //运行项目","categories":[],"tags":[{"name":"express","slug":"express","permalink":"http://yoursite.com/tags/express/"}]},{"title":"JavaScript中的继承","slug":"JavaScript中的继承","date":"2019-12-18T07:54:13.000Z","updated":"2019-12-18T08:20:37.475Z","comments":true,"path":"2019/12/18/JavaScript中的继承/","link":"","permalink":"http://yoursite.com/2019/12/18/JavaScript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/","excerpt":"","text":"ES6中类的继承class Person { constructor(name,age) { this.name = name; this.age = age; } // 注意:类中的方法不能使用function定义,会报错 showName() { console.log(this.name); } showAge() { console.log(this.age); } } //使用extends关键字,这里的super就是指父类 class Student extends Person { constructor(name,age,school) { super(name,age); this.school =school } showSchool() { console.log(this.school); } } let s1 = new Student('张三',18,'清华'); s1.showName(); s1.showAge(); s1.showSchool(); 其实ES6中的继承也仅仅是一种”语法糖”,它的本质也还是用原型链继承的方式实现的,只是换了一种写法,对开发人员更加友好 基于原型链的继承function Person(name,age){ this.name = name; this.age = age; } Person.prototype.showname = function (){ console.log(this.name); } Person.prototype.showage = function (){ console.log(this.age); } // 继承属性 function Student(name,age,school){ //改变this指向当前作用域中的this Person.call(this,name,age); this.school = school; } // 继承方法 Student.prototype = new Person(); Student.prototype.showschool = function (){ console.log(this.school); } let s1 = new Student('张三',18,'清华'); console.log(s1); s1.showage(); s1.showname(); s1.showschool();","categories":[],"tags":[]},{"title":"关于封装项目中axios请求","slug":"关于封装项目中axios请求","date":"2019-12-17T03:13:47.000Z","updated":"2019-12-17T03:58:52.917Z","comments":true,"path":"2019/12/17/关于封装项目中axios请求/","link":"","permalink":"http://yoursite.com/2019/12/17/%E5%85%B3%E4%BA%8E%E5%B0%81%E8%A3%85%E9%A1%B9%E7%9B%AE%E4%B8%ADaxios%E8%AF%B7%E6%B1%82/","excerpt":"","text":"创建一个单独的js文件,例如http.js, 具体代码如下: import axios from \"axios\"; // 调用axios的create()创建一个axios实例 let instance = axios.create({ baseURL: \"项目基地址\" }); // 添加请求拦截器 axios.interceptors.request.use( function(config) { // 在发送请求之前做些什么 // (例如在请求头中统一设置token) return config; }, function(error) { // 对请求错误做些什么 return Promise.reject(error); } ); // 添加响应拦截器 axios.interceptors.response.use( function(response) { // 对响应数据做点什么 return response; }, function(error) { // 对响应错误做点什么 return Promise.reject(error); } ); // 暴露axios实例 export default instance;","categories":[],"tags":[]}]}