<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用express开发服务端基本步骤</title>
      <link href="/2019/12/20/%E4%BD%BF%E7%94%A8express%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/"/>
      <url>/2019/12/20/%E4%BD%BF%E7%94%A8express%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="使用express框架开发服务端程序的基本步骤"><a href="#使用express框架开发服务端程序的基本步骤" class="headerlink" title="使用express框架开发服务端程序的基本步骤"></a>使用express框架开发服务端程序的基本步骤</h3><h4 id="第一步-安装Nodejs环境-因为express框架是基于nodejs的"><a href="#第一步-安装Nodejs环境-因为express框架是基于nodejs的" class="headerlink" title="第一步:安装Nodejs环境,因为express框架是基于nodejs的"></a>第一步:安装Nodejs环境,因为express框架是基于nodejs的</h4><h4 id="第二步-安装Express"><a href="#第二步-安装Express" class="headerlink" title="第二步:安装Express"></a>第二步:安装Express</h4><p>在终端命令行运行下面的命令:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局安装express</span>npm install express <span class="token operator">-</span>g<span class="token comment" spellcheck="true">//全局安装创建express项目的生成器工具</span>npm install express<span class="token operator">-</span>generator <span class="token operator">-</span>g </code></pre><h4 id="第三步-创建项目并初始化"><a href="#第三步-创建项目并初始化" class="headerlink" title="第三步:创建项目并初始化"></a>第三步:创建项目并初始化</h4><p>在终端命令行运行下面的命令:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//切换到你想放置项目的目录</span>express 项目名称   <span class="token comment" spellcheck="true">//创建项目</span><span class="token comment" spellcheck="true">//切换到项目根目录</span>npm install <span class="token comment" spellcheck="true">//安装相关依赖</span></code></pre><h4 id="第四步-启动项目"><a href="#第四步-启动项目" class="headerlink" title="第四步:启动项目"></a>第四步:启动项目</h4><pre class=" language-javascript"><code class="language-javascript">npm start <span class="token comment" spellcheck="true">//运行项目</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的继承</title>
      <link href="/2019/12/18/JavaScript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/12/18/JavaScript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h4 id="ES6中类的继承"><a href="#ES6中类的继承" class="headerlink" title="ES6中类的继承"></a>ES6中类的继承</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 注意:类中的方法不能使用function定义,会报错</span>            <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//使用extends关键字,这里的super就是指父类</span>        <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>school<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span>school            <span class="token punctuation">}</span>            <span class="token function">showSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'清华'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">showSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其实ES6中的继承也仅仅是一种”语法糖”,它的本质也还是用原型链继承的方式实现的,只是换了一种写法,对开发人员更加友好</p><h4 id="基于原型链的继承"><a href="#基于原型链的继承" class="headerlink" title="基于原型链的继承"></a>基于原型链的继承</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>showname <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>showage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 继承属性</span>        <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>school<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//改变this指向当前作用域中的this</span>             Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 继承方法</span>        Student<span class="token punctuation">.</span>prototype  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>showschool <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> s1  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'清华'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>         s1<span class="token punctuation">.</span><span class="token function">showage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">showname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">showschool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于封装项目中axios请求</title>
      <link href="/2019/12/17/%E5%85%B3%E4%BA%8E%E5%B0%81%E8%A3%85%E9%A1%B9%E7%9B%AE%E4%B8%ADaxios%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/12/17/%E5%85%B3%E4%BA%8E%E5%B0%81%E8%A3%85%E9%A1%B9%E7%9B%AE%E4%B8%ADaxios%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>创建一个单独的js文件,例如http.js, 具体代码如下:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用axios的create()创建一个axios实例</span><span class="token keyword">let</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> <span class="token string">"项目基地址"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在发送请求之前做些什么</span>    <span class="token comment" spellcheck="true">// (例如在请求头中统一设置token)</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对请求错误做些什么</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对响应数据做点什么</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对响应错误做点什么</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 暴露axios实例</span><span class="token keyword">export</span> <span class="token keyword">default</span> instance<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
